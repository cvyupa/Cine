/*
Universidad de las Fuerzas Armadas "Espe"
Proyecto Polaca
Estructuras de Datos
Fecha de creacion : /11/2017
Fecha de Modificacion : 29/11/2017
Ing : Fernando Solis
Integrantes :
 * Maurio Ruiz
 * Andres Sanaguano
 * Carlos Yupa
*/
//#include "stdafx.h"


#include<iostream>
#include <windows.h>
#include <dos.h>// isdigit
#include <cstdlib> // atoi
//#include <locale.h> /* setlocale */
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <ctime>
#include <string.h>
#include <windows.h>
#include <time.h>
#include <math.h>
#include <string>
#include<fstream>
#include <locale.h>
#include <direct.h>//mkdir
#include "Pila.h"
#include "Nodo.h"
#include "PilaGenerica.h"
#include "PilaGenericaD.h"
//#include "qrcodegen.h"
#define tamS 6
#define USER "mca"
#define PASS "1234"
#define ENTER 13
#define BACKSPACE 8
#define TAM 10
#define negro 0
#define azul 1
#define verde 2
#define cyan 3
#define rojo 4
#define magenta 5
#define marron 6
#define grisclaro 7
#define grisoscuro 8
#define azulclaro 9
#define verdeclaro 10
#define cyanclaro 11
#define rojoclaro 12
#define magentaclaro 13
#define amarillo 14
#define blanco 15
#define ENTER 13//login
#define BACKSPACE 8;//login
#define USER "espe"
#define PASS "sistemas"
#define TECLA_ARRIBA 72
#define TECLA_ABAJO 80
#define TECLA_ENTER 13
#define fondo 0
#define texto 3
#define ced 10
#define numeroAsientos 10
#define F1 59
#define letras 50//para imagen
#define dimp 10//para imagen
#define KEY_ESC 27
#define _CRT_SECURE_NO_DEPRECATE

using namespace std;

struct Elemento {
	string ope;
	bool operador;
};
struct Expresion {
	Elemento* expr;
	int n;
};

void t(int n){
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), n);
}

void col(int n){
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), n);
}
static HWND  hConWnd;

HWND BCX_Bitmap(char*, HWND = 0, int = 0, int = 0, int = 0, int = 0, int = 0, int = 0, int = 0, int = 0);
HWND GetConsoleWndHandle(void);

//prototipo de funciones
void gotoxy(int , int );
void color(int , int );
void inicio();
int menuSN();
void ayuda();
void about();
void qr();
int ObtenerEnteroPositivo();
int calculadora();
int backup();
void menuMouse();
void menuTeclas();
void menuTeclasPre();
void asignar(string);
bool valido(string);
bool operando(string c);
int prdadDentro(string operador);
int prdadFuera(string operando);
void agentes();
string postfija(string, int);
string separarDato(string, char *dato, int &pos);
void guardar(string, char *archivo);
double Evalua(Expresion postfija, double v[]);

//void  generarQr(char *);
//static void generarQrBasico(char dato1[]);
//static void printQr(const uint8_t qrcode[]);

string Prefija(string expresion, int num);
int prdadDentroPre(string operador);
int prdadFueraPre(string operando);
void crear_carpeta();
void recuperar_carpeta();
void menuMouse();
void leertxt();

void inicio()
{
   int i,j;



   for(i=0;i<130;i++)
   {
       for(j=0;j<41;j++)
       {
          t(127);gotoxy(1+i,1+j);printf("%c",219);
       }

   }

    hConWnd = GetConsoleWndHandle();
	if (hConWnd)
	{
		// select a bitmap file you have or use one of the files in the Windows folder
		// filename, handle, ID, ulcX, ulcY, width, height   0,0 auto-adjusts
		BCX_Bitmap("logo.bmp", hConWnd, 123, 350, 120, 0, 0);
		  // wait
	}

   for(i=0;i<72;i++)
   {

       t(135);gotoxy(30+i,30);printf("%c",219);
   }

    for(i=0;i<72;i++)
   {

       t(113);gotoxy(30+i,30);printf("%c",219);
    Sleep(50);
   }

   //getchar();


agentes();
Sleep(5);
  menuMouse();

}

//desarrollo de funciones


int ObtenerEnteroPositivo() {
	char digito, cadenaDelEntero[5];
	int entero, iterador = 0;
	while ((digito = _getch()) != 13 || iterador == 0) {
		if (digito == F1)
		{
			system("ayuda.chm");
		}
		if (digito >= '0'&&digito <= '9'&&iterador<5) {
			printf("%c", digito);
			cadenaDelEntero[iterador++] = digito;
		}
		if (iterador == 5)
			break;
	}
	cadenaDelEntero[iterador] = '\0';
	return entero = atoi(cadenaDelEntero);
}
int calculadora() {
	return 0;
}
int sonidos() {
	return 0;
}
int backup() {
	return 0;
}
void agentes() {
	system("WinAppManejoMSAgente.exe");
	//menuMouse();
}



//inicio funciones trigonometricas
float factorial(int n) {
	int i, fact = 1;

	for (i = 1; i <= n; i++)
		fact = fact * i;
	return (fact);
}
float ConversionGradesToRadians(float mX) {
	mX = ((mX * 3.141592) / 180);
	return mX;
}
float SerieSin(float mNum) {
	int i; float mX = 0, sum = 0;
	mX = ConversionGradesToRadians(mNum);

	for (i = 1; i <= 8; i++)
	{
		sum = sum + (((pow(-1, i + 1) * pow(mX, (2 * i - 1)))) /
			factorial(2 * i - 1));
	}
	return sum;
}
float SerieCos(float mNum) {
	int i; float mX, sum=0;
	mX = ConversionGradesToRadians(mNum);
	for (i = 0; i <= 7; i++)
	{
		sum = sum + ((pow(-1, i)* pow(mX, 2 * i)) / factorial(2 * i));
	}
	return sum;
}
double SerieTan(double mNum) {
	int i=0; float mX=0, sum=0, sum1=0;
	for (i = 1; i <= 8; i++)
	{
		sum = sum + (((pow(-1, i + 1) * pow(mX, (2 * i - 1)))) /
			factorial(2 * i - 1));

	}
	return sum / SerieCos(mNum);
}

int main()
{
	int opcion;
	inicio();

	return 0;
}

void ayuda() {
	system("ayuda.chm");
}
void about() {
	system("aboutl.bmp");
	fflush(stdin);
}
void qr() {

    system("start QR.jar");
  //   system("factura.txt");


}

void generar()
{
      system("factura.txt");
}

void gotoxy(int x, int y) {
	HANDLE hcon;
	hcon = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD dwPos;
	dwPos.X = x;
	dwPos.Y = y;
	SetConsoleCursorPosition(hcon, dwPos);
}
void color(int a, int b) {
	int color = (a * 16) + b;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}
/*int menu() {//teclas direccionales

	const char *titulo = "\t\t\tCALCULADORA POLACA";
	const char *opciones[] = {//1//"CALCULADORA",//2//"AYUDA"
		,//3//"QR",//4//"ABOUT",
		//5//"AGENTES",//6//"SONIDOS",//7//"BACKUP",//8//"SALIR" };
	int opcionSeleccionada = 1, numerodeopciones = 8;
	int tecla;
	bool repite = true;
	int i = 0;
	do {
		system("cls");
		gotoxy(7, 3 + opcionSeleccionada);
		color(fondo, texto);
		gotoxy(15, 2);
		printf("%s", titulo);
		gotoxy(5, 3 + opcionSeleccionada);
		for (int i = 0; i < numerodeopciones; ++i) {
			gotoxy(15, 4 + i);
			color(fondo, texto);
			printf("%s  ", opciones[i]);
		}
		gotoxy(15, 3 + opcionSeleccionada);
		color(12, 15);
		printf("%s", opciones[i]);
		color(fondo, texto);
		do {
			tecla = _getch();
		} while ((tecla != TECLA_ARRIBA) && (tecla != TECLA_ABAJO) && (tecla != TECLA_ENTER));

		switch (tecla) {
		case TECLA_ARRIBA:
			opcionSeleccionada--;
			i--;
			if (opcionSeleccionada<1) {
				opcionSeleccionada = numerodeopciones;
				i = numerodeopciones - 1;

			}
			break;
		case TECLA_ABAJO:
			opcionSeleccionada++;
			i++;
			if (opcionSeleccionada>numerodeopciones) {
				opcionSeleccionada = 1;
				i = 0;
			}
			break;
		case TECLA_ENTER:
			repite = false;
			break;
		}
	} while (repite);
	return opcionSeleccionada;
}*/
int menuSN() {

	const char *titulo = "\tDesea Ingresar Otro Dato?\n";
	const char *opciones[] = { "SI","NO" };
	int opcionSeleccionada = 1, numerodeopciones = 2;
	int tecla;
	bool repite = true;
	int i = 0;
	do {
		system("cls");
		gotoxy(7, 3 + opcionSeleccionada);
		color(fondo, texto);
		gotoxy(15, 2);
		printf("%s", titulo);
		gotoxy(5, 3 + opcionSeleccionada);
		for (int i = 0; i < numerodeopciones; ++i) {
			gotoxy(15, 4 + i);
			color(fondo, texto);
			printf("%s  ", opciones[i]);
		}
		gotoxy(15, 3 + opcionSeleccionada);
		color(12, 15);
		printf("%s", opciones[i]);
		color(fondo, texto);
		do {
			tecla = _getch();
		} while ((tecla != TECLA_ARRIBA) && (tecla != TECLA_ABAJO) && (tecla != TECLA_ENTER));

		switch (tecla) {
		case TECLA_ARRIBA:
			opcionSeleccionada--;
			i--;
			if (opcionSeleccionada<1) {
				opcionSeleccionada = numerodeopciones;
				i = numerodeopciones - 1;

			}
			break;
		case TECLA_ABAJO:
			opcionSeleccionada++;
			i++;
			if (opcionSeleccionada>numerodeopciones) {
				opcionSeleccionada = 1;
				i = 0;
			}
			break;
		case TECLA_ENTER:
			repite = false;
			break;
		}
	} while (repite);
	return opcionSeleccionada;
}
void iniciar() {
	/* LIBRERIA COLORES
	Colores :
	BLACK			0 Negro
	BLUE			1 Azul
	GREEN			2 Verde
	CYAN			3 Cían
	RED				4 Rojo
	MAGENTA			5 Magenta
	BROWN			6 Marrón
	LIGHTGRAY		7 Gris Claro
	DARKGRAY		8 Gris Oscuro
	LIGHTBLUE		9 Azul Claro
	LIGHTGREEN		A Verde Claro
	LIGHTCYAN		B Cían Claro
	LIGHTRED		C Rojo Claro
	LIGHTMAGENTA	D Magenta Claro
	YELLOW			E Amarillo
	WHITE			F Blanco
	*/
	int tesp = 15, x = 6, y = 1;
	char caracter[130];
	color(fondo, texto);
	char archivo[30]= "ARCHIVOS/INICIO.txt";
	FILE *ptr = fopen(archivo, "r");
	//barra superior y barra izquierda
	for (int i = 1; i<78; i++) //horizontal
	{
		gotoxy(i, 1); printf("%c", 223);
	}
	for (int i = 1; i<16; i++) //vertical
	{
		gotoxy(1, i); printf("%c", 219);
	}
	//barra inferior y barra derecha
	for (int i = 1; i<15; i++) //vertical
	{
		gotoxy(78, i); printf("%c", 219);
	}
	for (int i = 1; i <= 78; i++) //barra inferior horizonatal
	{
		gotoxy(i, 15); printf("%c", 223);
	}
	// printf ("\n");
	while (!feof(ptr))
	{
		fgets(caracter, 130, ptr);
		gotoxy(x, y); cout << caracter;
		Sleep(125);
		y++;
	}
	printf("\n\n\n");
	//system("pause");
	Sleep(3000);
	Beep(330, 200);
	system("cls");
	system("color 0A");
	//letras espe
	//E

	gotoxy(43, 10); printf("%c", 219); Sleep(tesp);
	gotoxy(43, 11); printf("%c", 219); Sleep(tesp);
	gotoxy(43, 12); printf("%c", 219); Sleep(tesp);
	gotoxy(43, 13); printf("%c", 219); Sleep(tesp);
	gotoxy(43, 14); printf("%c", 219); Sleep(tesp);
	gotoxy(43, 15); printf("%c", 219); Sleep(tesp);
	//gotoxy(43,16);printf("%c",219);Sleep(tesp);

	gotoxy(44, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(45, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(46, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(47, 10); printf("%c", 223); Sleep(tesp);


	gotoxy(44, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(45, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(46, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(47, 13); printf("%c", 223); Sleep(tesp);


	gotoxy(43, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(44, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(45, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(46, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(47, 16); printf("%c", 223); Sleep(tesp);
	Beep(800, 300);
	//S
	gotoxy(50, 10); printf("%c", 219); Sleep(tesp);
	gotoxy(50, 11); printf("%c", 219); Sleep(tesp);
	gotoxy(50, 12); printf("%c", 219); Sleep(tesp);
	//gotoxy(50,13);printf("%c",219);Sleep(tesp);
	gotoxy(54, 13); printf("%c", 219); Sleep(tesp);
	gotoxy(54, 14); printf("%c", 219); Sleep(tesp);
	gotoxy(54, 15); printf("%c", 219); Sleep(tesp);

	gotoxy(51, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(52, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(53, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(54, 10); printf("%c", 223); Sleep(tesp);

	gotoxy(50, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(51, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(52, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(52, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(53, 13); printf("%c", 223); Sleep(tesp);

	gotoxy(50, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(51, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(52, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(53, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(54, 16); printf("%c", 223); Sleep(tesp);
	Beep(800, 300);

	//P
	gotoxy(57, 10); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 11); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 12); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 13); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 14); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 15); printf("%c", 219); Sleep(tesp);
	gotoxy(57, 16); printf("%c", 219); Sleep(tesp);

	gotoxy(58, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(59, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(60, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(61, 10); printf("%c", 223); Sleep(tesp);


	gotoxy(61, 10); printf("%c", 219); Sleep(tesp);
	gotoxy(61, 11); printf("%c", 219); Sleep(tesp);
	gotoxy(61, 12); printf("%c", 219); Sleep(tesp);
	//gotoxy(61,13);printf("%c",219);Sleep(tesp);


	gotoxy(61, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(60, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(59, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(58, 13); printf("%c", 223); Sleep(tesp);
	Beep(800, 300);

	//E
	gotoxy(64, 10); printf("%c", 219); Sleep(tesp);
	gotoxy(64, 11); printf("%c", 219); Sleep(tesp);
	gotoxy(64, 12); printf("%c", 219); Sleep(tesp);
	gotoxy(64, 13); printf("%c", 219); Sleep(tesp);
	gotoxy(64, 14); printf("%c", 219); Sleep(tesp);
	gotoxy(64, 15); printf("%c", 219); Sleep(tesp);
	//gotoxy(64,16);printf("%c",219);Sleep(tesp);

	gotoxy(65, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(66, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(67, 10); printf("%c", 223); Sleep(tesp);
	gotoxy(68, 10); printf("%c", 223); Sleep(tesp);


	gotoxy(65, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(66, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(67, 13); printf("%c", 223); Sleep(tesp);
	gotoxy(68, 13); printf("%c", 223); Sleep(tesp);


	gotoxy(64, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(65, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(66, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(67, 16); printf("%c", 223); Sleep(tesp);
	gotoxy(68, 16); printf("%c", 223); Sleep(tesp);
	Beep(800, 300);
	gotoxy(46, 25); printf("CALCULADORA POLACA\n");
	//barra cargando

	gotoxy(40, 29);//1er numero mueve hacia izq o der 2do arriba abajo

	printf("\tCARGANDO...\n");
	for (int i = 30; i<80; i++)//80 marca el tamanio
	{
		gotoxy(i, 30);//1er numero mueve hacia izq o der 2do arriba abajo
		printf("%c", 219);//valor de caracter a imprimir para la barra mediante asccii
		for (int x = 50; x<90; x++)
		{//los espacios que va a recorre la barra en la pantalla
			for (int y = 1; y<30; y++)
			{//determina el tiempo de movimiento de la barra
				gotoxy(y + 180, 34);
			}
		}
	}
	Beep(262, 150);
	Beep(262, 150);
	Beep(262, 150);
	printf("\n\n");
	Sleep(1000);
	//system("pause");
	system("cls");
	Beep(330, 200);
}


void acerca()

{

    system("cls");

    int x,y;


    for(x=0;x<130;x++)
    {
        for(y=0;y<39;y++)
        {
            t(127);gotoxy(1+x,1+y);printf("%c",219);
        }
    }

    //========================



    //??????????????????????




    for(x=0;x<76;x++)
    {
        for(y=0;y<17;y++)
        {
            t(0);gotoxy(4+x,15+y);printf("%c",219);
        }
    }

    //=====================

    //====================

     for(x=0;x<130;x++)
    {
        for(y=0;y<5;y++)
        {
            t(113);gotoxy(1+x,1+y);printf("%c",219);
            t(10);gotoxy(5,2);printf("          ");
            t(15);gotoxy(5,3);printf("  Acerca  ");
            t(10);gotoxy(5,4);printf("          ");
        }
    }


    for(x=0;x<120;x++)
    {
        t(135);gotoxy(3+x,19);printf("%c",219);
    }

for(x=0;x<130;x++)
    {

           t(114);gotoxy(1+x,40);printf("%c",219);
    }
    hConWnd = GetConsoleWndHandle();
	if (hConWnd)
	{
		// select a bitmap file you have or use one of the files in the Windows folder
		// filename, handle, ID, ulcX, ulcY, width, height   0,0 auto-adjusts
		BCX_Bitmap("amig.bmp", hConWnd, 150, 570, 250, 0, 0);
		//getchar();  // wait
	}
	t(10);

	      gotoxy(5,16);printf("                                                                        ");
	t(14);gotoxy(5,17);printf("                  Proyecto Polaca                  Ing: Fernando Solis  ");
	      gotoxy(5,18);printf("                                                                        ");
t(10);
	gotoxy(5,20);printf("                     ");
	gotoxy(5,21);printf("     Integrantes     ");
	gotoxy(5,22);printf("                     ");

	gotoxy(5,24);printf("                     ");
	gotoxy(5,25);printf(" Mauricio Ruiz       ");
	gotoxy(5,26);printf(" Andres Sanaguano    ");
	gotoxy(5,27);printf(" Carlos Yupa         ");
	gotoxy(5,28);printf("                     ");



}
//funciones

void menuMouse() {

int cx,cy;
    int i,j;
  system("cls");
t(0);

//================================Pantalla negra

for(i=0;i<132;i++)
  {

      for(j=0;j<43;j++)
      {

          t(0);gotoxy(0+i,0+j);printf("%c",219);
      }
  }


  //====================Fondo



//============================

  for(i=0;i<130;i++)
  {

      for(j=0;j<41;j++)
      {

          t(127);gotoxy(1+i,1+j);printf("%c",219);
      }
  }


   for(i=0;i<128;i++)
  {

      for(j=0;j<9;j++)
      {

          t(113);gotoxy(2+i,2+j);printf("%c",219);
      }
  }
  //====================================


  //======================



 for(j=0;j<128;j++)
      {

          t(2);gotoxy(2+j,11);printf("%c",219);
      }

  //===================
  for(j=0;j<128;j++)
      {

          t(4);gotoxy(2+j,40);printf("%c",219);
      }

  //=================linea


   for(i=0;i<41;i++)
  {

      for(j=0;j<10;j++)
      {

          t(248);gotoxy(89+i,25+j);printf("%c",219);
      }
  }

//====================================================
   for(i=0;i<41;i++)
  {

      for(j=0;j<22;j++)
      {

          t(248);gotoxy(6+i,13+j);printf("%c",219);
      }
  }


/*
   for(i=0;i<15;i++)
  {
      for(j=0;j<39;j++)
      {
          t(4);gotoxy(115+i,2+j);printf("%c",219);
      }
  }*/

  t(113);
gotoxy(5,3);printf("__________      .__                         _________        .__                   ");
gotoxy(5,4);printf("*______   *____ |  | _____    ____ _____    *_   ___ *_____  |  |   ____  __ __    ");
gotoxy(5,5);printf(" |     ___/  _ *|  | *__  * _/ ___**__  *   /    *  */*__  * |  | _/ ___*|  |  *   ");
gotoxy(5,6);printf(" |    |  (  <_> )  |__/ __ **  *___ / __ *_ *     *____/ __ *|  |_*  *___|  |  /   ");
gotoxy(5,7);printf(" |____|   *____/|____(____  /*___  >____  /  *______  (____  /____/*___  >____/    ");
gotoxy(5,8);printf("                          */     */     */          */     */          */          ");
  //===============================Cuadritos
 for(i=0;i<22;i++)
      {
          for(j=0;j<7;j++)
          {
          t(10);gotoxy(110,3+j);printf("                   ");
          t(12);gotoxy(112,6);printf("   [%c]  Salir  ",16);

          }
      }




for(i=0;i<40;i++)
  {
      for(j=0;j<5;j++)
      {
          t(119);gotoxy(3+i,14+j);printf("%c",219);
          t(113);gotoxy(5,16);printf(" [%c]  Calcular ",16);
          t(119);gotoxy(3+i,20+j);printf("%c",219);
          t(113);gotoxy(5,22);printf(" [%c]  Mostrar Operacion Ingresada     ",16);

          t(119);gotoxy(3+i,26+j);printf("%c",219);
          t(113);gotoxy(5,28);printf(" [%c]  Generar Qr - Pdf          ",16);

          t(119);gotoxy(3+i,32+j);printf("%c",219);
          t(113);gotoxy(5,34);printf(" [%c]  Ayuda                  ",16);



          t(119);gotoxy(86+i,26+j);printf("%c",219);
          t(113);gotoxy(88,28);printf(" [%c]  Generar Respaldos         ",16);

          t(119);gotoxy(86+i,32+j);printf("%c",219);
          t(113);gotoxy(88,34);printf(" [%c]  Ver datos Guardados       ",16);

         // t(119);gotoxy(50+i,26+j);printf("%c",219);
         // t(113);gotoxy(55,28);printf(" [%c]  Ver Respaldo             ",16);


      }



  }
	HANDLE paraEntrada = GetStdHandle(STD_INPUT_HANDLE);
	INPUT_RECORD regEntrada;
	DWORD evento;
	COORD coordenadas;
	//SetConsoleMode(paraEntrada, ENABLE_PROCESSED_INPUT | ENABLE_MOUSE_INPUT);
	int ingreso;
bool ind = false;
	int x,y;

HANDLE houtput = GetStdHandle(STD_OUTPUT_HANDLE);
	HANDLE hinput = GetStdHandle(STD_INPUT_HANDLE);
	INPUT_RECORD Input;
	DWORD Events;
	COORD coord;
	CONSOLE_CURSOR_INFO inf;
	inf.dwSize = 20;
	inf.bVisible = false;
	SetConsoleCursorInfo(houtput, &inf);
	SetConsoleMode(hinput, ENABLE_PROCESSED_INPUT | ENABLE_MOUSE_INPUT);
	while (1) {
		ReadConsoleInput(hinput, &Input, 1, &Events);
		if (Input.EventType == MOUSE_EVENT) {
			if (Input.Event.MouseEvent.dwButtonState == FROM_LEFT_1ST_BUTTON_PRESSED) {
				coord.X = Input.Event.MouseEvent.dwMousePosition.X;
				coord.Y = Input.Event.MouseEvent.dwMousePosition.Y;
				for (int i = 0; i<40; i++) {
                  for(cy=0;cy<5;cy++)

					if (coord.X == i&&coord.Y == 14+cy)

					{


						ind = true;

						for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
						 t(0);gotoxy(3+cx,14+cy);printf("%c",219);
                         t(10);gotoxy(5,16);printf(" [%c]  Calcular ",16);

      }
  }
                        // getch();
						Sleep(150);
						system("cls");
			printf("\n================Conversion Prefijo================\n");
			menuTeclasPre();
			menuMouse();
					}

				}
  //====================================================Opcion 2

  for (int i = 0; i<50; i++) {
        for(cy=0;cy<5;cy++)
					if (coord.X == i&&coord.Y == 20+cy) {
						ind = true;

							for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
         t(0);gotoxy(3+cx,20+cy);printf("%c",219);
          t(10);gotoxy(5,22);printf(" [%c]  Mostrar Operacion Ingresada     ",16);
      }
  }
  Sleep(150);
  t(10);
						system("cls");
			leertxt();
			system("cls");
			menuMouse();
					}
				}



  //================================================


   //====================================================Opcion 3

  for (int i = 0; i<50; i++) {
        for(cy=0;cy<5;cy++)
					if (coord.X == i&&coord.Y == 26+cy) {
						ind = true;

							for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
        t(0);gotoxy(3+cx,26+cy);printf("%c",219);
          t(10);gotoxy(5,28);printf(" [%c]  Generar Qr - Pdf           ",16);
      }
  }
  Sleep(150);
  t(10);
						system("cls");
					qr();
					generar();
					system("pause");
					system("cls");
					menuMouse();
					}
				}



  //================================================


     //====================================================Opcion 4

  for (int i = 0; i<50; i++) {
        for(cy=0;cy<5;cy++)
					if (coord.X == i&&coord.Y == 32+cy) {
						ind = true;

							for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
         t(0);gotoxy(3+cx,32+cy);printf("%c",219);
          t(10);gotoxy(5,34);printf(" [%c]  Ayuda                  ",16);

      }
  }
  Sleep(150);
  t(10);

  ShellExecute(NULL, TEXT("open"), TEXT("C:\\Documents and Settings\\carlos\\Mis documentos\\proyecto\\proyectosegundo\\ayuda.chm"), NULL, NULL, SW_SHOWNORMAL);
						system("cls");
					acerca();
					system("pause");
					system("cls");
					menuMouse();
					}
				}



  //================================================


  //====================================================Opcion 5

  for (int i = 86; i<110; i++) {
        for(cy=0;cy<5;cy++)
					if (coord.X == i&&coord.Y == 26+cy) {
						ind = true;

							for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
         t(0);gotoxy(86+cx,26+cy);printf("%c",219);
          t(10);gotoxy(88,28);printf(" [%c]  Generar Respaldos              ",16);

      }
  }
  Sleep(150);
  t(10);
						crear_carpeta();
					system("pause");
					system("cls");
					menuMouse();
					}
				}


//====================================================Opcion 6

  for (int i = 86; i<110; i++) {
        for(cy=0;cy<5;cy++)
					if (coord.X == i&&coord.Y == 32+cy) {
						ind = true;

							for(cx=0;cx<40;cx++)
  {
      for(cy=0;cy<5;cy++)
      {
         t(0);gotoxy(86+cx,32+cy);printf("%c",219);
          t(10);gotoxy(88,34);printf(" [%c]  Respladar                  ",16);

      }
  }
  Sleep(150);
  t(10);
						recuperar_carpeta();
					system("pause");
					system("cls");
					menuMouse();
					}
				}



  //================================================

  //====================================================Opcion 6

  for (int i = 110; i<125; i++) {
        for(cy=0;cy<7;cy++)
					if (coord.X == i&&coord.Y == 3+cy) {
						ind = true;

		 for(int i=0;i<80;i++)
        {
            for(int j=0;j<15;j++)
            {
               col(113); gotoxy(20+i,15+j);printf("%c",219);
            }
        }


		col(10);
		gotoxy(45,20);printf("                                  ");
		gotoxy(45,21);printf(" < Gracias por usar el sistema >  ");
		gotoxy(45,22);printf("                                  ");




    getch();
					exit(0);

					}
				}



  //================================================


  //================================================

				if (!ind) {
                        menuMouse();
					//main();
				}
				ind = false;
			}
		}
	}






		switch (ingreso)
		{
		case 1:
			system("cls");
			printf("\n================Conversion Prefijo================\n");
			menuTeclasPre();
			menuMouse();
			break;



		case 2:
			system("cls");
			leertxt();
			system("cls");
			menuMouse();

			break;

    			case 3:
			system("cls");
					qr();
					system("pause");
					system("cls");
					menuMouse();

			break;

				case 4:
			system("cls");
					acerca();
					system("pause");
					system("cls");
					menuMouse();

			break;


			case 5:
			system("cls");
			//printf("Generar Pdf");
             generar();
					system("pause");
					system("cls");
					menuMouse();

			break;

			case 6:
			system("cls");
					agentes();
					system("pause");
					system("cls");
					menuMouse();

			break;

			case 7:
			system("cls");
					crear_carpeta();
					system("pause");
					system("cls");
					menuMouse();

			break;

			case 9:
			system("cls");
					recuperar_carpeta();
					system("pause");
					system("cls");
					menuMouse();

			break;

			case 10:
			system("cls");
					printf("6");
					system("cls");
					printf("Salir..");
					system("pause");
					exit(0);

			break;
		default:
			break;
		}



}

void leeres()
{
    //===========================================================================

     system("cls");

    int x,y;


    for(x=0;x<130;x++)
    {
        for(y=0;y<39;y++)
        {
            t(0);gotoxy(1+x,1+y);printf("%c",219);
        }
    }

    //========================



    //??????????????????????




    for(x=0;x<118;x++)
    {
        for(y=0;y<17;y++)
        {
            t(0);gotoxy(4+x,15+y);printf("%c",219);
        }
    }

    //=====================

    //====================

     for(x=0;x<130;x++)
    {
        for(y=0;y<5;y++)
        {
            t(113);gotoxy(1+x,1+y);printf("%c",219);
            t(10);gotoxy(5,2);printf("             ");
            t(15);gotoxy(5,3);printf("  Respaldo   ");
            t(10);gotoxy(5,4);printf("             ");
        }
    }


    for(x=0;x<120;x++)
    {
        t(0);gotoxy(3+x,15);printf("%c",219);
    }

for(x=0;x<130;x++)
    {

           t(114);gotoxy(1+x,40);printf("%c",219);
    }



    //==========================================================================
  t(10);gotoxy(5,8);system("type respaldo.txt");
	char cadena[20];
	FILE *fichero;
	fichero = fopen("respaldo.txt", "r");
	while (!feof(fichero)) {
		fgets(cadena, 20, fichero);
	}
	fclose(fichero);
	//gotoxy(10,17);t(10);cout << "Expresion =" << cadena;
	system("pause");
}



void leertxt()
{
    //===========================================================================

     system("cls");

    int x,y;


    for(x=0;x<130;x++)
    {
        for(y=0;y<39;y++)
        {
            t(127);gotoxy(1+x,1+y);printf("%c",219);
        }
    }

    //========================



    //??????????????????????




    for(x=0;x<118;x++)
    {
        for(y=0;y<17;y++)
        {
            t(0);gotoxy(4+x,15+y);printf("%c",219);
        }
    }

    //=====================

    //====================

     for(x=0;x<130;x++)
    {
        for(y=0;y<5;y++)
        {
            t(113);gotoxy(1+x,1+y);printf("%c",219);
            t(10);gotoxy(5,2);printf("             ");
            t(15);gotoxy(5,3);printf("  Respaldo   ");
            t(10);gotoxy(5,4);printf("             ");
        }
    }


    for(x=0;x<120;x++)
    {
        t(135);gotoxy(3+x,15);printf("%c",219);
    }

for(x=0;x<130;x++)
    {

           t(114);gotoxy(1+x,40);printf("%c",219);
    }



    //==========================================================================
 // system("notepad.exe respaldo.txt");
	char cadena[20];
	FILE *fichero;
	fichero = fopen("respaldo.txt", "r");
	while (!feof(fichero)) {
		fgets(cadena, 20, fichero);
	}
	fclose(fichero);
	gotoxy(10,17);t(10);cout << "Expresion =" << cadena;
	system("pause");
}

void menu() {
	int cont = 3;
	system("color f0");
	system("cls");
	string menu[] = {
		"1.- Conversion prefijo",
		"2.- Conversion postfijo",
		"3.- Salir             " };
	int cursor = 0;
	char tecla;
	for (;;) {
		system("cls");
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
		cout << "                         CALCULADORA POLACA" << endl;
		for (int i = 0; i < 3; i++) {
			if (cursor == i) {
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 160);
				cout << menu[i] << endl;
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
			}
			else {
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
				cout << menu[i] << endl;
			}
		}
		for (;;) {
			tecla = _getch();
			if (tecla == 80) {
				cursor++;
				if (cursor == cont)
				{
					cursor = 0;
				}
				break;
			}
			if (tecla == 72) {
				cursor--;
				if (cursor == -1)
				{
					cursor = cont - 1;
				}
				break;
			}
			if (tecla == 13) {
				switch (cursor) {
				case 0:
					system("cls");
					printf("\n================Conversion Prefijo================\n");
					menuTeclasPre();
					break;
				case 1:
					system("cls");
					printf("\n================Conversion Postfijo================\n");
					menuTeclas();
					break;
				case 2:
					system("cls");
					exit(1);
					break;
				}
			}
		}
	}
}

void menuTeclas() {
	system("color f0");
	string menu1[] = {
		"1.- Insertar Expresion",
		"2.- Ver datos (QR)    ",
		"3.- Calcular          ",
		"4.- Pdf               ",
		"5.- About             ",
		"6.- Regresar          " };
	Pila *pila1 = NULL;
	int cursor = 0;
	string cad;
	char tecla;
	char nombreArchivo[15] = "respaldo.txt";
	PilaGenerica pila;
	Expresion post;
	string cadena, cverdad;
	char cadena1[30];
	bool desapila;
	int n = -1, i = 0, num;
	char dato[25] = "";
	for (;;) {
		system("cls");
		SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
		cout << "                         CALCULADORA POLACA" << endl;
	//	cout << "                 Daniel Corral  -  Abigail Carvajal" << endl << endl;
		for (int i = 0; i < 6; i++) {
			if (cursor == i) {
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 160);
				cout << menu1[i] << endl;
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
			}
			else {
				SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 240);
				cout << menu1[i] << endl;
			}
		}
		for (;;) {
			tecla = _getch();
			if (tecla == 80) {
				cursor++;
				if (cursor == 6)
				{
					cursor = 0;
				}
				break;
			}
			if (tecla == 72) {
				cursor--;
				if (cursor == -1)
				{
					cursor = 5;
				}
				break;
			}
			if (tecla == 13) {
				switch (cursor) {
				case 0:
					system("cls");
					printf("\n\n***************INFIJA A POSTFIJA***************\n\n");
					cout << "Ingrese funcion: " << endl;
					cin >> cadena;
					num = cadena.size();
					cverdad = postfija(cadena, num);
					guardar("EXPRESION POSTFIJA =", nombreArchivo);
					guardar(cadena, nombreArchivo);
					printf("\nPulse cualquier tecla para generar codigo QR...");
					_getch();

					for (i = 0; i < cverdad.size(); i++)
						cadena1[i] = cverdad[i];
					cadena1[i] = '\0';
					//generarQr(cadena1);
					pila.limpiarPila();
					menuTeclas();
					break;
				case 1:
					system("cls");
					crear_carpeta();
					printf("Respaldo guardado con exito\n");
					system("pause");
					break;
				case 2:
					system("cls");

					system("pause");
					menuTeclas();
					break;
				case 3:
					system("cls");
					menuTeclas();
					break;
				case 4:
					menuTeclas();
					break;
				case 5:
					menuMouse();//exit(1);
					break;
				}
				break;
			}
		}
	}
}

void menuTeclasPre() {

    int proceso;
	Pila *pila1 = NULL;
	int cursor = 0;
	string cad;
	char tecla;
	char nombreArchivo[14] = "respaldo.txt";
	PilaGenerica pila;
	Expresion post;
	string cadena, cverdad;
	char cadena1[30];
	bool desapila;
	int n = -1, i = 0, num;
system("cls");

//==========================================Ingresooooo========================================================================

string fun;
	int j;
	int cx;
	int cy;
int x,y;

for(x=0;x<130;x++)
{
    t(114);gotoxy(1+x,40);printf("%c",219);
}

for(x=0;x<130;x++)
{
    for(y=0;y<39;y++)
    {

        t(113);gotoxy(1+x,1+y);printf("%c",219);
    }
}

for(x=0;x<130;x++)
{
    for(y=0;y<3;y++)
    {

        t(120);gotoxy(1+x,1+y);printf("%c",219);
    }
}

  for(i=0;i<39;i++)
  {

      for(j=0;j<17;j++)
      {

          t(127);gotoxy(3+i,14+j);printf("%c",219);
      }
  }



					t(143);gotoxy(3,2);printf("  Infija Y Posfija  ");

					t(120);gotoxy(5,7);printf("                    ");
					t(113);gotoxy(5,8);cout << " Ingrese funcion:   " ;
					t(120);gotoxy(5,9);printf("                    ");
					t(0);gotoxy(27,7);printf("                                                            ");
					t(0);gotoxy(27,8);printf("                                                            ");
					t(0);gotoxy(27,9);printf("                                                            ");

	for(i=0;i<5;i++)
    {
        for(j=0;j<3;j++)
        {
            t(135);gotoxy(5+i,15+j);printf("%c",219);
            t(112);gotoxy(7,16);printf("1");

            t(135);gotoxy(12+i,15+j);printf("%c",219);
            t(112);gotoxy(14,16);printf("2");

            t(135);gotoxy(19+i,15+j);printf("%c",219);
            t(112);gotoxy(21,16);printf("3");

            t(135);gotoxy(26+i,15+j);printf("%c",219);
            t(112);gotoxy(28,16);printf("+");

             t(135);gotoxy(33+i,15+j);printf("%c  ",219);
             t(121);gotoxy(35,16);printf("Sen(");




            //===segundo

            t(135);gotoxy(5+i,19+j);printf("%c",219);
            t(112);gotoxy(7,20);printf("4");

            t(135);gotoxy(12+i,19+j);printf("%c",219);
            t(112);gotoxy(14,20);printf("5");

            t(135);gotoxy(19+i,19+j);printf("%c",219);
            t(112);gotoxy(21,20);printf("6");


            t(135);gotoxy(26+i,19+j);printf("%c",219);
            t(112);gotoxy(28,20);printf("-");

            t(135);gotoxy(33+i,19+j);printf("%c  ",219);
             t(121);gotoxy(35,20);printf("Cos(");


            //===tercero

            t(135);gotoxy(5+i,23+j);printf("%c",219);
            t(112);gotoxy(7,24);printf("7");

            t(135);gotoxy(12+i,23+j);printf("%c",219);
            t(112);gotoxy(14,24);printf("8");

            t(135);gotoxy(19+i,23+j);printf("%c",219);
            t(112);gotoxy(21,24);printf("9");

            t(135);gotoxy(26+i,23+j);printf("%c",219);
            t(112);gotoxy(28,24);printf("*");

             t(135);gotoxy(33+i,23+j);printf("%c  ",219);
             t(121);gotoxy(35,24);printf("tan(");


               //===cuarta

            t(135);gotoxy(5+i,27+j);printf("%c",219);
            t(112);gotoxy(7,28);printf(".");

            t(135);gotoxy(12+i,27+j);printf("%c",219);
            t(112);gotoxy(14,28);printf("0");

            t(135);gotoxy(19+i,27+j);printf("%c",219);
            t(112);gotoxy(21,28);printf("/");

            t(135);gotoxy(26+i,27+j);printf("%c",219);
            t(112);gotoxy(28,28);printf("(");

            t(135);gotoxy(33+i,27+j);printf("%c  ",219);
             t(112);gotoxy(35,28);printf(")");





        }
    }
             t(121);gotoxy(90,7);printf("               ");
             t(121);gotoxy(90,8);printf("               ");
             t(121);gotoxy(90,9);printf("               ");
             t(124);gotoxy(92,8);printf("  Calcular  ");



             t(121);gotoxy(50,19);printf("                        ");
             t(121);gotoxy(50,20);printf("                        ");
             t(121);gotoxy(50,21);printf("                        ");
             t(124);gotoxy(52,20);printf(" Expresion Prefija : ");


             t(129);gotoxy(75,19);printf("                                     ");
             t(129);gotoxy(75,20);printf("                                     ");
             t(129);gotoxy(75,21);printf("                                     ");


             t(121);gotoxy(50,23);printf("                        ");
             t(121);gotoxy(50,24);printf("                        ");
             t(121);gotoxy(50,25);printf("                        ");
             t(124);gotoxy(52,24);printf(" Expresion Postfija : ");

             t(129);gotoxy(75,23);printf("                                     ");
             t(129);gotoxy(75,24);printf("                                     ");
             t(129);gotoxy(75,25);printf("                                     ");

             t(121);gotoxy(50,27);printf("                        ");
             t(121);gotoxy(50,28);printf("                        ");
             t(121);gotoxy(50,29);printf("                        ");
             t(124);gotoxy(52,28);printf(" Resultado : ");

             t(129);gotoxy(75,27);printf("                                     ");
             t(129);gotoxy(75,28);printf("                                     ");
             t(129);gotoxy(75,29);printf("                                     ");

	bool ind = false;

	HANDLE houtput = GetStdHandle(STD_OUTPUT_HANDLE);
	HANDLE hinput = GetStdHandle(STD_INPUT_HANDLE);
	INPUT_RECORD Input;
	DWORD Events;
	COORD coord;
	CONSOLE_CURSOR_INFO inf;
	inf.dwSize = 20;
	inf.bVisible = false;
	SetConsoleCursorInfo(houtput, &inf);
	SetConsoleMode(hinput, ENABLE_PROCESSED_INPUT | ENABLE_MOUSE_INPUT);
	while (1) {
		ReadConsoleInput(hinput, &Input, 1, &Events);
		if (Input.EventType == MOUSE_EVENT) {
			if (Input.Event.MouseEvent.dwButtonState == FROM_LEFT_1ST_BUTTON_PRESSED) {
				coord.X = Input.Event.MouseEvent.dwMousePosition.X;
				coord.Y = Input.Event.MouseEvent.dwMousePosition.Y;


//====================================================Opcion 1

  for (int i = 5; i<10; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 15+cy) {
						ind = true;

  Sleep(150);
  t(10);
					fflush(stdin);
			fun=fun+"1";
			fflush(stdin);
					}
				}

				//====================================================Opcion 2

  for (int i = 12; i<17; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 15+cy) {
						ind = true;

  Sleep(150);
  t(10);
					fflush(stdin);
			fun=fun+"2";
			fflush(stdin);
					}
				}

//====================================================Opcion

  for (int i = 19; i<26; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 15+cy) {
						ind = true;

	  Sleep(150);
  t(10);
					fflush(stdin);
			fun=fun+"3";
			fflush(stdin);
					}
				}


//====================================================Opcion +

  for (int i = 26; i<31; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 15+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"+";
			fflush(stdin);
					}
				}


//====================================================Opcion sen

  for (int i = 33; i<40; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 15+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"sen(";
			fflush(stdin);
					}
				}
//===============Segundo Bloque========================================================================================

//====================================================Opcion 1

  for (int i = 5; i<10; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 19+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+"4";
			fflush(stdin);
					}
				}

				//====================================================Opcion 2

  for (int i = 12; i<17; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 19+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+"5";
			fflush(stdin);
					}
				}

//====================================================Opcion

  for (int i = 19; i<26; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 19+cy) {
						ind = true;

	  Sleep(150);
  t(10);

			fflush(stdin);
			fun=fun+"6";
			fflush(stdin);
					}
				}


//====================================================Opcion +

  for (int i = 26; i<31; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 19+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"-";
			fflush(stdin);
					}
				}


//====================================================Opcion cos

  for (int i = 33; i<40; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 19+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"cos(";
			fflush(stdin);
					}
				}

//===============Tercer Bloque========================================================================================

//====================================================Opcion 1

  for (int i = 5; i<10; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 23+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+"7";
			fflush(stdin);
					}
				}

				//====================================================Opcion 2

  for (int i = 12; i<17; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 23+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+"8";
			fflush(stdin);
					}
				}

//====================================================Opcion

  for (int i = 19; i<26; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 23+cy) {
						ind = true;

	  Sleep(150);
  t(10);

			fflush(stdin);
			fun=fun+"9";
			fflush(stdin);
					}
				}


//====================================================Opcion +

  for (int i = 26; i<31; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 23+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"*";
			fflush(stdin);
					}
				}


//====================================================Opcion cos

  for (int i = 33; i<40; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 23+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"tan(";
			fflush(stdin);
					}
				}

//===============Cuarto Bloque========================================================================================

//====================================================Opcion 1

  for (int i = 5; i<10; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 27+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+".";
			fflush(stdin);
					}
				}

				//====================================================Opcion 2

  for (int i = 12; i<17; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 27+cy) {
						ind = true;

  Sleep(150);
  t(10);
				fflush(stdin);
			fun=fun+"0";
			fflush(stdin);
					}
				}

//====================================================Opcion

  for (int i = 19; i<26; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 27+cy) {
						ind = true;

	  Sleep(150);
  t(10);

			fflush(stdin);
			fun=fun+"/";
			fflush(stdin);
					}
				}


//====================================================Opcion +

  for (int i = 26; i<31; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 27+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+"(";
			fflush(stdin);
					}
				}


//====================================================Opcion cos

  for (int i = 33; i<40; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 27+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			fun=fun+")";
			fflush(stdin);
					}
				}

	//==========================Calcular

	for (int i = 90; i<110; i++) {
        for(cy=0;cy<3;cy++)
					if (coord.X == i&&coord.Y == 7+cy) {
						ind = true;

	  Sleep(150);
  t(10);
  fflush(stdin);
			cadena=fun;
			num = cadena.size();
					cverdad = Prefija(cadena, num);
					//guardar("Prefija: ", nombreArchivo);
					guardar(cadena, nombreArchivo);
					system("pause");
            menuMouse();
			fflush(stdin);
					}
				}


gotoxy(35,8);t(10);cout<<fun;

  //================================================
  //====================================================


				if (!ind) {
					menuTeclasPre();
				}
				ind = false;
			}
		}
	}


}

void asignar(string ope)
{
	string aux;
	string aux1;
	for (int i = 0; i < ope.length(); i++) //obtengo la longitud de la cadena ingresada
	{
		stringstream ss;
		Pila *auxp = pila;
		int ba = 0;
		ss << ope[i];
		ss >> aux;
		if (aux == "*" || aux == "+" || aux == "/" || aux == "^" || aux == "-" || aux == "(") //Identifico si esa posicion es un signo de interrogacion o un número
		{
			if (pila == NULL)
			{
				poner(aux);
			}
			else
			{
				switch (aux[0])
				{
					ba = 0;
				case '+':
					if (pila != NULL || pila->getDat() != "(" || pila->getDat() != "+")
					{
						do
						{
							aux1 = aux1 + pila->getDat();
							pila = pila->getSgt();
							if (pila != NULL)
							{
								if (pila->getDat() == "c")
									ba = 1;
							}
						} while (pila != NULL&&ba == 0);
					}
					if (pila == NULL || aux == "(")
					{
						poner(aux);

					}
					break;
				case '-':
				{
					if (pila != NULL || pila->getDat() != "(")
					{
						do
						{
							aux1 = aux1 + pila->getDat();
							pila = pila->getSgt();
							if (pila != NULL)
							{
								if (pila->getDat() == "c")
									ba = 1;
							}
						} while (pila != NULL&&ba == 0);
					}
					if (pila == NULL || aux == "(")
					{
						poner(aux);

					}
					break;
				case '*':
					if (pila != NULL || pila->getDat() != "(" || pila->getDat() != "+" || pila->getDat() != "-")
					{
						do
						{
							aux1 = aux1 + pila->getDat();
							pila = pila->getSgt();
							if (pila != NULL)
							{
								if (pila->getDat() == "c" || pila->getDat() != "+" || pila->getDat() != "-")
									ba = 1;
							}
						} while (pila != NULL&&ba == 0);
					}
					if (pila == NULL || aux == "(" || pila->getDat() != "+" || pila->getDat() != "-")
					{
						poner(aux);

					}
					break;
				case '/':
					if (pila != NULL || pila->getDat() != "(" || pila->getDat() != "+" || pila->getDat() != "-")
					{
						do
						{
							aux1 = aux1 + pila->getDat();
							pila = pila->getSgt();
							if (pila != NULL)
							{
								if (pila->getDat() == "c" || pila->getDat() != "+" || pila->getDat() != "-")
									ba = 1;
							}
						} while (pila != NULL&&ba == 0);
					}
					if (pila == NULL || aux == "(" || pila->getDat() != "+" || pila->getDat() != "-")
					{
						poner(aux);

					}
					break;
				}
				}
			}
		}
		else
		{
			aux1 = aux1 + aux;
		}
	}
	if (pila != NULL)
	{
		do
		{
			aux1 = aux1 + pila->getDat();

			pila = pila->getSgt();
		} while (pila != NULL);
	}

	printf("\n\t");
	cout << aux1;
}

bool valido(char expr[20]) {
	bool sw = true;
	for (int i = 0; (i<strlen(expr) && sw); i++) {
		char c;
		c = expr[i];
		sw = sw && (
			(c >= 'A' && c <= 'Z') ||
			(c >= 'a' && c <= 'z') ||
			(c >= '0' && c <= '9') ||
			(c == '^') || (c == '/') || (c == '*') ||
			(c == '+') || (c == '-') || (c == '\n') ||
			(c == '(') || (c == ')')
			);
	}
	return sw;
}

bool operando(char c) { //determina si el caracter es un operando
	return(c >= '0'&& c <= '9');
}

int prdadDentro(char operador) { //prioridad del operador en la expresion
	int pdp = 0;
	switch (operador) {
	case '^':
		pdp = 3;
		break;
	case '*': case '/':
		pdp = 2;
		break;
	case '+': case '-':
		pdp = 1;
		break;
	case '(':
		pdp = 0;

	}
	return pdp;
}

int prdadFuera(char operando) { //prioridad del operador en la expresion infija
	int pfp = 0;
	switch (operando)
	{
	case '^':
		pfp = 4;
		break;
	case '*': case '/':
		pfp = 2;
		break;
	case '+': case '-':
		pfp = 1;
		break;
	case '(':
		pfp = 5;
	}
	return pfp;
}

string postfija(string expresion, int num) {
	PilaGenerica pila;
	Expresion post;
	Elemento elemento[25];
	string tokens[25];
	char nombreArchivo[14] = "polaca.txt";
	string ch, opeCima;
	char dato[25] = "";
	int cont = 0, n = -1, i = 0;
	bool desapila;
	//Valido que la expresion sea valida
	if (!valido(expresion))
		printf("Caracter no valido en la expresion");

	for (int j = 0; j < num; j++) {
		//separo la expresion
		tokens[j] = separarDato(expresion, dato, j);
		ch = tokens[j];
		//cout << "\ntoken = " << ch.c_str();
		//printf("\n");
		if (operando(ch.c_str())) {
			n++;
			elemento[n].ope = ch.c_str();
			elemento[n].operador = false;
			guardar("Expresion :", nombreArchivo);
			guardar(elemento[n].ope.c_str(), nombreArchivo);
			//printf("\nELEMENTO = %s Operando = %d\n", elemento[n].ope.c_str(), elemento[n].operador);
		}
		else if (ch.compare(")")) {
			desapila = true;
			while (desapila) {
				opeCima = " ";
				if (!pila.pilaVacia()) {
					opeCima = pila.cimaPila();
				}
				if (pila.pilaVacia() || (prdadFuera(ch.c_str()) > prdadDentro(opeCima))) { //si la pila esta vacia o si la prioridad del caracter de fuera > prioridad que el que esta dentro
																						   //printf("\naqui llego 4 ch = %s", ch.c_str());
					pila.push(ch.c_str());
					desapila = false;

				}
				else if (prdadFuera(ch.c_str()) <= prdadDentro(opeCima)) {
					elemento[++n].ope = pila.pop();
					elemento[n].operador = true;
					guardar("Pila :", nombreArchivo);
					guardar(elemento[n].ope.c_str(), nombreArchivo);
					//printf("\naqui llego 5");
				}
			}
		}

		else { //si es )
			opeCima = pila.pop();
			if (opeCima.compare("(")) {
				//printf("\n\nOPECIMA = %s", opeCima.c_str());
				do {
					if (!pila.pilaVacia()) {
						elemento[++n].ope = opeCima;
						elemento[n].operador = true;
						opeCima = pila.pop();
						guardar("Pila :", nombreArchivo);
						guardar(elemento[n].ope.c_str(), nombreArchivo);
					}
					//printf("\n\nOPECIMA = %s",opeCima.c_str());
				} while (opeCima != "(");
			}
		}

	}

	while (!pila.pilaVacia()) {
		elemento[++n].ope = pila.pop();
		elemento[n].operador = true;
		guardar("Expresion :", nombreArchivo);
		guardar(elemento[n].ope.c_str(), nombreArchivo);
	}
	//Expresion post;
	post.expr = elemento;
	post.n = n;
	string cverdad;
	double valor, v[26];
	//printf("\ntotal elementos %d\n", n);

  /*   t(10);gotoxy(3,18);cout << "                                                             ";
     t(10);gotoxy(3,19);cout << "                                                             ";
     t(10);gotoxy(3,20);cout << "                                                             ";
	t(10);gotoxy(3,19);cout << "  Expresion Postfija  : ";
*/
t(143);gotoxy(78,24);
	for (int i = 0; i <= post.n; i++)
	{
		printf("%s ", post.expr[i].ope.c_str());
		cverdad.append(post.expr[i].ope.c_str());
	}

	valor = Evalua(post, v);
/*	t(10);gotoxy(3,20);cout << "                                                             ";
	t(10);gotoxy(3,21);cout << "                                                             ";
	t(10);gotoxy(3,22);cout << "                                                             ";
	t(10);gotoxy(3,23);cout << "                                                             ";
	*/

	t(143);gotoxy(78,28);cout << valor;


	return cverdad;
}

string Prefija(string expresion, int num) {
	PilaGenerica pila;
	Expresion pre;
	Elemento elemento[25];
	string tokens[25];
	string ch, opeCima, expresionV;
	char dato[25] = "";
	int cont = 0, n = -1, i = 0, h;
	bool desapila;
	char nombreArchivo[12] = "factura.txt";

	//Valido que la expresion sea valida
	if (!valido(expresion))
		printf("Caracter no valido en la expresion");

	for (int j = 0; j < num; j++) {
		//separo la expresion
		tokens[j] = separarDato(expresion, dato, j);
	}
	for (int k = num - 1; k >= 0; k--) {
		ch = tokens[k];
		//cout << "\ntoken = " << ch.c_str();
		//printf("\n");
		if (operando(ch.c_str())) {
			n++;
			elemento[n].ope = ch.c_str();
			elemento[n].operador = false;
			guardar("Expresion :", nombreArchivo);
			guardar(elemento[n].ope.c_str(), nombreArchivo);
			//printf("\nELEMENTO = %s Operando = %d\n", elemento[n].ope.c_str(), elemento[n].operador);
		}
		else if (ch.compare("(")) {
			desapila = true;
			while (desapila) {
				opeCima = " ";
				if (!pila.pilaVacia()) {
					opeCima = pila.cimaPila();
				}
				if (pila.pilaVacia() || (prdadFueraPre(ch.c_str()) >= prdadDentroPre(opeCima))) { //si la pila esta vacia o si la prioridad del caracter de fuera > prioridad que el que esta dentro
																								  //printf("\naqui llego 4 ch = %s", ch.c_str());
					pila.push(ch.c_str());
					desapila = false;

				}
				else if (prdadFueraPre(ch.c_str()) < prdadDentroPre(opeCima)) {
					elemento[++n].ope = pila.pop();
					elemento[n].operador = true;
					guardar("Pila :", nombreArchivo);
					guardar(elemento[n].ope.c_str(), nombreArchivo);
					//printf("\naqui llego 5");
				}
			}
		}

		else { //si es (
			opeCima = pila.pop();
			if (opeCima.compare(")")) {
				//printf("\n\nOPECIMA = %s", opeCima.c_str());
				do {
					elemento[++n].ope = opeCima;
					elemento[n].operador = true;
					opeCima = pila.pop();
					guardar("Expresion :", nombreArchivo);
					guardar(elemento[n].ope.c_str(), nombreArchivo);
					//printf("\n\nOPECIMA = %s",opeCima.c_str());
				} while (opeCima != ")");
			}
		}
	}

	while (!pila.pilaVacia()) {
		elemento[++n].ope = pila.pop();
		elemento[n].operador = true;
		guardar("Expresion :", nombreArchivo);
		guardar(elemento[n].ope.c_str(), nombreArchivo);
	}
	//Expresion pre;
	pre.expr = elemento;
	pre.n = n;
	string cverdad;
	double valor, v[26];
	//printf("\ntotal elementos %d\n", n);
	/*t(10);gotoxy(3,14);cout << "                                                             ";
	t(10);gotoxy(3,15);cout << "                                                             ";
	t(10);gotoxy(3,16);cout << "                                                             ";
	t(10);gotoxy(3,17);cout << "                                                             ";
	t(10);gotoxy(3,18);cout << "                                                             ";
	t(10);gotoxy(3,15);cout << "  Expresion Prefija  :  ";
*/
t(143);gotoxy(78,20);

	for (int i = pre.n; i >= 0; i--)
	{
		printf("%s ", pre.expr[i].ope.c_str());
		cverdad.append(pre.expr[i].ope.c_str());
	}
	postfija(expresion, num);
	/*valor = Evalua(post, v);
	cout << "\n Valor de la expresion =  " << valor;*/
	/*cout << "EXPRE" << cverdad;
	system("pause");*/
	return cverdad;
}

double Evalua(Expresion postfija, double v[]) {
	PilaGenericaD pilaGen;
	double valor, a, b;
	int cont = 0;
	for (int i = 0; i <= postfija.n; i++) {
		string op;
		if (postfija.expr[i].operador) {
			op = postfija.expr[i].ope;
			/*printf("operador: %s\n", op.c_str());*/
			if (!op.compare("sen") || !op.compare("cos") || !op.compare("tan")) {
				if (cont != 1) {
					b = pilaGen.pop();
					a = pilaGen.pop();
					/*printf(" \na: %f\n", a);
					printf(" \nb:%f\n", b);*/
					if (!op.compare("sen")) {
						valor = sin(b);
					}
					else if (!op.compare("cos")) {
						valor = cos(b);
					}
					else if (!op.compare("tan")) {
						valor = tan(b);
					}
					pilaGen.push(a);
					pilaGen.push(valor);
				}
				else {
					a = pilaGen.pop();
					if (!op.compare("sen")) {
						valor = sin(a);
					}
					else if (!op.compare("cos")) {
						valor = cos(a);
					}
					else if (!op.compare("tan")) {
						valor = tan(a);
					}
					pilaGen.push(valor);
				}


			}
			else if (!op.compare("+") || !op.compare("-") || !op.compare("*") || !op.compare("/") || !op.compare("^")) {
				b = pilaGen.pop();
				a = pilaGen.pop();
				/*printf(" \nImprimen en else a: %f\n", a);
				printf(" \nImprime en else b:%f\n", b);
				printf("operador: %s\n", op.c_str());*/
				if (!op.compare("^")) {
					valor = pow(a, b);
				}
				else if (!op.compare("*")) {
					valor = a*b;
				}
				else if (!op.compare("/")) {
					if (b != 0.0)
						valor = a / b;
					else {


                                    t(12);gotoxy(27,8);printf("  No se puede realizar division para cero  ");


						_getch();
						menuTeclasPre();
						break;
					}

				}
				else if (!op.compare("+")) {
					valor = a + b;
				}
				else if (!op.compare("-")) {
					valor = a - b;
				}
				pilaGen.push(valor);
			}

		}
		else {
			int indice;
			double aa;
			op = postfija.expr[i].ope;
			aa = atof(op.c_str());
			pilaGen.push(aa);
			cont++;
		}
	}

	return pilaGen.pop();
}

string separarDato(string expresion, char *dato, int &pos)
{
	string aux;
	char p, p1[2];
	p = expresion[pos];
	//printf("\np : %c\n", p);
	if (p == '+' || p == '-' || p == '*' || p == '/' || p == '^' || p == '(' || p == ')')
	{
		p1[0] = p;
		p1[1] = '\0';
		strcpy(dato, p1);
		//pos++;
		aux = dato;
		//cout << "\nen if dato: " << dato<<"posicion ="<<pos;
		return aux;
	}
	else
	{
		p1[0] = '\0';
		strcpy(dato, p1);
		do
		{
			p = expresion[pos];
			if (p == '\0' || p == '+' || p == '-' || p == '*' || p == '/' || p == '^' || p == '(' || p == ')')break;
			p1[0] = p;
			p1[1] = '\0';
			strcat(dato, p1);
			//printf(" p es: %c \n", p);
			pos++;
		} while (true);
		pos--;
		//if (strcmp(dato, "sen") == 0) strcpy(dato, "sen");
		//if (strcmp(dato, "cos") == 0) strcpy(dato, "cos");
		//if (strcmp(dato, "tan") == 0) strcpy(dato, "tan");
	}

	//cout << "\ndato: " << dato;
	aux = dato;
	return aux;
}

bool valido(string expr) {
	bool sw = true;
	for (int i = 0; (i<expr.size() && sw); i++) {
		string c;
		c = expr[i];
		sw = sw && (
			(c >= "A" && c <= "Z") ||
			(c >= "a" && c <= "z") ||
			(c >= "0" && c <= "9") ||
			(c == "^") || (c == "/") || (c == "*") ||
			(c == "+") || (c == "-") || (c == "\n") ||
			(c == "(") || (c == ")")
			);
	}
	return sw;
}

bool operando(string c) { //determina si el caracter es un operando
	return(c >= "0" && c <= "999");
}

int prdadDentro(string operador) { //prioridad del operador en la expresion (dentro de la pila)
	int pdp = 0;

	if (operador == "^" || operador == "sen" || operador == "cos" || operador == "tan")
		pdp = 3;
	else if (operador == "*" || operador == "/")
		pdp = 2;
	else if (operador == "+" || operador == "-")
		pdp = 1;
	else if (operador == "(")
		pdp = 0;
	return pdp;
}

int prdadFuera(string operando) { //prioridad del operador en la expresion infija
	int pfp = 0;
	if (operando == "^" || operando == "sen" || operando == "cos" || operando == "tan")
		pfp = 4;
	else if (operando == "*" || operando == "/")
		pfp = 2;
	else if (operando == "+" || operando == "-")
		pfp = 1;
	else if (operando == "(")
		pfp = 5;
	return pfp;
}

void guardar(string expresion, char *archivo) {
	FILE *ptr;
	string nombre;

	ptr = fopen(archivo, "a"); //REALIZO LA APERTURA DEL ARCHIVO
	if (ptr == NULL)
	{
		printf("ERROR.\n");
	}
	else
	{
		expresion += "\n";
		nombre = expresion.c_str();
		//fputs(nombre,ptr);
		fprintf(ptr, " %s", nombre.c_str());

		fclose(ptr);
	}
}

/*
void generarQrBasico(char dato1[]) {
	char *dato = dato1;  // User-supplied text
	enum qrcodegen_Ecc errCorLvl = qrcodegen_Ecc_LOW;  // Error correction level

													   // Make and print the QR Code symbol
	uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
	uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
	bool ok = qrcodegen_encodeText(dato, tempBuffer, qrcode, errCorLvl,
		qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, true);
	if (ok)
		printQr(qrcode);
}*/
/*
static void printQr(const uint8_t qrcode[]) {
	int size = qrcodegen_getSize(qrcode);
	int border = 4;
	for (int y = -border; y < size + border; y++) {
		for (int x = -border; x < size + border; x++) {
			fputs((qrcodegen_getModule(qrcode, x, y) ? "\333\333" : "  "), stdout);
		}
		fputs("\n", stdout);
	}
}*/
/*
static void generarQr(char *mensaje)
{
	printf("GENERADOR DE QR\n");
	generarQrBasico(mensaje);
	system("pause");
}
*/
int prdadDentroPre(string operador) { //prioridad del operador en la expresion (dentro de la pila)
	int pdp = 0;

	if (operador == "^" || operador == "sen" || operador == "cos" || operador == "tan")
		pdp = 3;
	else if (operador == "*" || operador == "/")
		pdp = 2;
	else if (operador == "+" || operador == "-")
		pdp = 1;
	else if (operador == ")")
		pdp = 0;
	return pdp;
}

int prdadFueraPre(string operando) { //prioridad del operador en la expresion infija
	int pfp = 0;
	if (operando == "^" || operando == "sen" || operando == "cos" || operando == "tan")
		pfp = 4;
	else if (operando == "*" || operando == "/")
		pfp = 2;
	else if (operando == "+" || operando == "-")
		pfp = 1;
	else if (operando == ")")
		pfp = 5;
	return pfp;
}

void crear_carpeta()
{
	//genera dia mes año
	time_t t;
	struct tm *tm;
	char fechayhora[100];

	t = time(NULL);
	tm = localtime(&t);
	strftime(fechayhora, 100, "%d-%m-%Y", tm);

	//genera hora minutos segundos
	time_t current_time;
	struct tm * time_info;
	char timeString[9];

	time(&current_time);
	time_info = localtime(&current_time);

	strftime(timeString, sizeof(timeString), "%H-%M-%S", time_info);
	//puts(timeString);

	//creacion de carpeta en directorio especifico
	string ruta, nombre_carpeta, ruta_absoluta, rutaprueba;

	//INGRESAR RUTA ABSOLUTA
	//printf("Ingrese Ruta Donde crear carpeta\n");
	fflush(stdin);
	//getline(cin, ruta);
	fflush(stdin);
	// printf("Ingrese Nombre de la carpeta\n");
	//fflush(stdin);
	// getline(cin,nombre_carpeta);
	rutaprueba += "";
	ruta_absoluta = rutaprueba + "Hora " + timeString + " Fecha " + fechayhora;
	if (_mkdir(ruta_absoluta.c_str()) == 0)//para comprobar si se cre la carpeta 0 si esta correcta
	{
	    for(int i=0;i<80;i++)
        {
            for(int j=0;j<15;j++)
            {
               col(113); gotoxy(20+i,15+j);printf("%c",219);
            }
        }


		col(10);
		gotoxy(45,19);printf("                                  ");
		gotoxy(45,20);printf(" < Backup creado correctamente >  ");
		gotoxy(45,21);printf("                                  ");
	}
	else {
		printf("\nerror al crear Backup carpeta\n");
	}
	//creacion de archivo en la carpeta creada
	string nombre_archivo = "respaldo", ruta_absoluta_archivo, o;
	//printf("Ingrese Nombre para el archivo de respaldo\n");
	fflush(stdin);
	// getline(cin,nombre_archivo);
	ruta_absoluta_archivo = ruta_absoluta + "\\" + nombre_archivo + "-" + timeString + " - " + fechayhora + ".txt";
	FILE *arch;
	if (arch = fopen(ruta_absoluta_archivo.c_str(), "a"))
	{
		printf("\nArchivo creado ");
	}
	else {
		printf("error al crear archivo");
	}
}


void recuperar_carpeta(){

    leeres();


}
HWND BCX_Bitmap(char* Text, HWND hWnd, int id, int X, int Y, int W, int H, int Res, int Style, int Exstyle)
{
	HWND A;
	HBITMAP hBitmap;

	// set default style
	if (!Style) Style = WS_CLIPSIBLINGS | WS_CHILD | WS_VISIBLE | SS_BITMAP | WS_TABSTOP;

	// form for the image
	A = CreateWindowEx(Exstyle, "static", NULL, Style, X, Y, 0, 0, hWnd, (HMENU)id, GetModuleHandle(0), NULL);

	// Text contains filename
	hBitmap = (HBITMAP)LoadImage(0, Text, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE | LR_CREATEDIBSECTION);

	// auto-adjust width and height
	if (W || H) hBitmap = (HBITMAP)CopyImage(hBitmap, IMAGE_BITMAP, W, H, LR_COPYRETURNORG);
	SendMessage(A, (UINT)STM_SETIMAGE, (WPARAM)IMAGE_BITMAP, (LPARAM)hBitmap);
	if (W || H) SetWindowPos(A, HWND_TOP, X, Y, W, H, SWP_DRAWFRAME);
	return A;
}

HWND GetConsoleWndHandle(void)
{
	HWND hConWnd;
	OSVERSIONINFO os;
	char szTempTitle[64], szClassName[128], szOriginalTitle[1024];

	os.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);
	GetVersionEx(&os);
	// may not work on WIN9x
	if (os.dwPlatformId == VER_PLATFORM_WIN32s) return 0;

	GetConsoleTitle(szOriginalTitle, sizeof(szOriginalTitle));
	sprintf(szTempTitle, "%u - %u", GetTickCount(), GetCurrentProcessId());
	SetConsoleTitle(szTempTitle);
	Sleep(60);
	// handle for NT and XP
	hConWnd = FindWindow(NULL, szTempTitle);
	SetConsoleTitle(szOriginalTitle);

	// may not work on WIN9x
	if (os.dwPlatformId == VER_PLATFORM_WIN32_WINDOWS)
	{
		hConWnd = GetWindow(hConWnd, GW_CHILD);
		if (hConWnd == NULL) return 0;
		GetClassName(hConWnd, szClassName, sizeof(szClassName));
		// while ( _stricmp( szClassName, "ttyGrab" ) != 0 )
		while (strcmp(szClassName, "ttyGrab") != 0)
		{
			hConWnd = GetNextWindow(hConWnd, GW_HWNDNEXT);
			if (hConWnd == NULL) return 0;
			GetClassName(hConWnd, szClassName, sizeof(szClassName));
		}
	}
	return hConWnd;
}
